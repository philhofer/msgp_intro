Go and MessagePack

Phil Hofer
@ph_hofer
http://github.com/philhofer

* Structure

- `msgp`: Why?

- Use

- Feature set

- Your questions and live coding

Slides at:

.link http://go-talks.appspot.com/github.com/philhofer/msgp_intro

* How I Got Here

* The Standard Library Way

Declare a type in go:

	type Data struct {
		Thing string `json:"thing"`
	}

Follow with

	data, err := json.Marshal(&v)

* Why It's Great

- Declare sane data structures

- Uniform API for everything (json/xml/gob)

- Good third-party libs follow this idiom

* Why It's Awful

- Reflection is slow

- `interface{}` is sad

* I Need More Speed

* The Protocol Buffers Way

- Declare sane data type in an external file

- Generate go code; examine

- Weep developer tears; commit

* Why It's Great

- Speed (and size)

- Uniformity (polyglot platforms)

* Why It's Awful

- Pointers, everywhere

- Little to no native stream support

- Data that isn't self-describing...

(Note: even Kenton Varda rags on protocol buffers.)

* Exhibit A

.image pointers.png _ 600

* Exibit B

.image gross.png _ 600

* In Summary

- Sane (user-defined) data structures

- Speed

- Pick one

* There Is Hope

* A New Hope (July, 2014)

.image gogenerate.png 200 _

.image a-new-hope.jpg 300 _

* 'The Go Way'

* Objective

Generate fast, human-readable serialization code from existing type declarations.

"Speed or Sanity" is a false choice.

.link http://github.com/tinylib/msgp

* About MessagePack

- Simple, compact binary format

- Simple, extendable type system

- Supported in many, many languages

* MessagePack Type System

.image msgpack.png _ 600

Map, Array, Bin, Str, Int, Uint, Float32, Float64, Bool, Nil, Extension

* How It Works

.code main.go /START DECL OMIT/,/END DECL OMIT/

* Some Output

.code main_gen.go /START GEN OMIT/,/END GEN OMIT/

* What Can We Generate?

Right now, the following:

	MarshalMsg([]byte) ([]byte, error)

	UnmarshalMsg([]byte) ([]byte, error)

	EncodeMsg(*msgp.Writer) error

	DecodeMsg(*msgp.Reader) error

	Msgsize() int

* From Go to Go

- Parse source with `go/ast`; extract `*ast.TypeDecl`

- Translate `*ast.TypeDecl` to `gen.Elem`

- Use a `gen.Generator` to translate `gen.Elem` to method(s)

* A More Interesting Example

.code main.go /START CPT OMIT/,/END CPT OMIT/

The `msgp.Extension` interface:

	type Extension interface {
		Len() int
		ExtensionType() int8
		MarshalBinaryTo([]byte) error
		UnmarshalBinary([]byte) error
	}

* Output

.code main_gen.go /START CPTGEN OMIT/,/END CPTGEN OMIT/

* Extensions: A Quick Implementation

.code main.go /START OMIT/,/END OMIT/

* Is It Fast? A (Mediocre) Benchmark

.image perf.png _ 800

* A (Better) Benchmark

.image pipe.png _ 900

* How?

- Measure everything

- Exploit knowledge of `gc` (inlining, esc)

	$ go build -gcflags -m

- No unnecessary copying or allocation

- Buffer management

* The Library

* Errors

Inspired by `net.Error` and `syscall.OpError`:

	type Error interface {
		error
		Resumable() bool
	}

Every error that originates in `msgp` implements `Error`.

* Type Information

	func (r *Reader) NextType() (Type, error)

	func NextType(b []byte) (Type, error)

You can implement arbitrarily complex decoding procedures.

This is, effectively, how MessagePack -> JSON translation is implemented.

* Skip

	func (r *Reader) Skip() error

	func Skip(b []byte) ([]byte, error)

`Skip` is faster than your RAM.

Also, `(*Reader).Skip` uses `io.Seek()` if it can.

* Raw Type

	type Request struct {
		Header map[string]string `msg:"header"`
		Body   msgp.Raw          `msg:"body"`
	}

`msgp.Raw` knows how to unmarshal anything into itself.

Allows for:

- Partial/lazy de-serialization

- (User-implemented) union types

- Declarative application protocol definitions

* The Future

.link http://github.com/tinylib/synapse

.code syn/main.go /START OMIT/,/END OMIT/

Right now: 1.1M req/res cycles per second over `net.Pipe()`.


